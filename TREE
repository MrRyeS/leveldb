├── Makefile
├── db
│   ├── autocompact_test.cc
│   ├── builder.cc
│   ├── builder.h
│   ├── c.cc				// C bindings for leveldb
│   ├── c_test.c			// C bindings for leveldb
│   ├── corruption_test.cc
│   ├── db_bench.cc
│   ├── db_impl.cc
│   ├── db_impl.h
│   ├── db_iter.cc
│   ├── db_iter.h
│   ├── db_test.cc
│   ├── dbformat.cc 			// db内部使用的key、comapator定义实现
│   ├── dbformat.h			// db内部使用的key、comapator定义实现
│   ├── dbformat_test.cc
│   ├── dumpfile.cc
│   ├── fault_injection_test.cc
│   ├── filename.cc 			// db内部关于文件名的生成函数、解析函数
│   ├── filename.h 			// db内部关于文件名的生成函数、解析函数
│   ├── filename_test.cc
│   ├── leveldbutil.cc			// 一个dump指定文件的工具
│   ├── log_format.h			// leveldb binlog实现
│   ├── log_reader.cc			// leveldb binlog实现
│   ├── log_reader.h			// leveldb binlog实现
│   ├── log_test.cc			// leveldb binlog实现
│   ├── log_writer.cc			// leveldb binlog实现
│   ├── log_writer.h			// leveldb binlog实现
│   ├── memtable.cc
│   ├── memtable.h
│   ├── recovery_test.cc
│   ├── repair.cc
│   ├── skiplist.h			// skiplist 数据结构实现 memtable 等使用
│   ├── skiplist_test.cc		// skiplist 数据结构实现 memtable 等使用
│   ├── snapshot.h			// SnapshopList Snapshot实现
│   ├── table_cache.cc
│   ├── table_cache.h
│   ├── version_edit.cc
│   ├── version_edit.h
│   ├── version_edit_test.cc
│   ├── version_set.cc
│   ├── version_set.h
│   ├── version_set_test.cc
│   ├── write_batch.cc
│   ├── write_batch_internal.h
│   └── write_batch_test.cc
├── doc
│   ├── bench				// benchmark 源码，参见benchmark文档
│   │   ├── db_bench_sqlite3.cc
│   │   └── db_bench_tree_db.cc
│   ├── benchmark.html			// benchmark 文档
│   ├── doc.css
│   ├── impl.html
│   ├── index.html			// 文档
│   ├── log_format.txt
│   └── table_format.txt
├── helpers				// 辅助测试的工具集
│   └── memenv				// 基于内存的 env 的实现
│       ├── memenv.cc			// 基于内存的 env 的实现
│       ├── memenv.h			// 基于内存的 env 的实现
│       └── memenv_test.cc		// 基于内存的 env 的实现
├── include
│   └── leveldb
│       ├── c.h 			// C bindings for leveldb
│       ├── cache.h			// Cache 定义
│       ├── comparator.h		// 比较器 定义
│       ├── db.h 			// ::DB定义
│       ├── dumpfile.h
│       ├── env.h			// env 定义
│       ├── filter_policy.h		// FilterPolicy 定义
│       ├── iterator.h			// 迭代器定义
│       ├── options.h			// db open/read/write配置
│       ├── slice.h			// const byte[] 的实现
│       ├── status.h			// status 返回值实现
│       ├── table.h
│       ├── table_builder.h
│       └── write_batch.h
├── port				// 提供各个平台相关的基本接口，主要包含锁、条件变量、指针的原子读写
│   ├── atomic_pointer.h		// 指针的原子读写实现
│   ├── port.h				// * 主要头文件，外部调用#include这个即可
│   ├── port_example.h			// 说明而已
│   ├── port_posix.cc			// posix平台的相关实现，包含mutex、condvar
│   ├── port_posix.h			// posix平台的相关实现，包含mutex、condvar
│   └── thread_annotations.h		// 测试hook定义
├── table
│   ├── block.cc
│   ├── block.h
│   ├── block_builder.cc
│   ├── block_builder.h
│   ├── filter_block.cc
│   ├── filter_block.h
│   ├── filter_block_test.cc
│   ├── format.cc
│   ├── format.h
│   ├── iterator.cc
│   ├── iterator_wrapper.h
│   ├── merger.cc
│   ├── merger.h
│   ├── table.cc
│   ├── table_builder.cc
│   ├── table_test.cc
│   ├── two_level_iterator.cc
│   └── two_level_iterator.h
└── util
    ├── arena.cc			// memory pool implement
    ├── arena.h 			// memory pool implement
    ├── arena_test.cc			// memory pool implement
    ├── bloom.cc			// bloomfilter FilterPolicy实现
    ├── bloom_test.cc			// bloomfilter FilterPolicy实现
    ├── cache.cc			// LRUCache 实现
    ├── cache_test.cc			// LRUCache 测试
    ├── filter_policy.cc		// FilterPolicy 虚析构函数实现
    ├── coding.cc			// varint 实现
    ├── coding.h			// varint 实现
    ├── coding_test.cc			// varint 实现
    ├── comparator.cc			// 比较器 实现
    ├── crc32c.cc			// crc32 算法
    ├── crc32c.h			// crc32 算法
    ├── crc32c_test.cc			// crc32 算法
    ├── env.cc				// env interface
    ├── env_posix.cc			// posix 平台实现的env
    ├── env_test.cc			// env test
    ├── hash.cc				// hash 算法
    ├── hash.h				// hash 算法
    ├── hash_test.cc			// hash 算法
    ├── histogram.cc			// 直方图,benchmark使用
    ├── histogram.h			// 直方图,benchmark使用
    ├── logging.cc			// db Log format、转义的方法
    ├── logging.h			// db Log format、转义的方法
    ├── posix_logger.h			// db Log file handle
    ├── mutexlock.h			// RAII Locker
    ├── options.cc			// db open/read/write配置
    ├── random.h			// 随机数算法
    ├── status.cc			// status 返回值实现
    ├── testharness.cc			// 单元测试实现
    ├── testharness.h			// 单元测试实现
    ├── testutil.cc			// 单元测试实现
    └── testutil.h			// 单元测试实现
